#!/bin/bash
# NOTE: Typically, this file needs to be sourced, rather than executed

# Copyright 2023 Chainguard, Inc.
# Author: Dustin Kirkland <kirkland@chainguard.dev>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

HELP="
These are set of shell functions that facilitate package and image development
on Wolfi and Chainguard, within a command line environment.

Below, you can find some helpful hints on the available commands, and what
they do...

 - wolfi-branch [BRANCH_NAME]: Get your branch of the Wolfi OS source code
   - NOTE: You must set GH_USER to your github username
 - wolfi-grype [TARGET]: Run grype on a given target
 - wolfi-local: Launch latest Wolfi in a docker container, with a local package repository
 - wolfi-sdk: Launch latest Wolfi in a docker container for building packages
 - wolfi-sandbox: cd into a temporary directory in the form /tmp/wolfi-YYYYMMDD-HHMMSS-XXXXXXXX
 - wolfi-shell: Launch latest Wolfi in a docker container
 - wolfi-source: Get the current Wolfi OS and Images source code, in a new wolfi-sandbox directory
 - wolfi-yam: Reformat yaml to Wolfi specifications
"

function info() {
	printf "%s\n" "INFO: $@"
}

function error() {
	printf "%s\n" "ERROR: $@" 1>&2
}

function wolfi() {
	printf "%s\n" "$HELP"
}

function _wolfi-check-deps() {
	(echo "$PATH" | grep -qs "PATH.*go/bin") || export PATH="$PATH:$HOME/go/bin"
	. /etc/os-release
	if [ "$NAME" = "Wolfi" ]; then
		local pkg="apk add"
		type go 2>&1 >/dev/null || error "Missing 'go': sudo $pkg go"
		type gh 2>&1 >/dev/null || error "Missing 'gh': sudo $pkg gh"
		type git 2>&1 >/dev/null || error "Missing 'git': sudo $pkg git"
		type docker 2>&1 >/dev/null || error "Missing 'docker': sudo $pkg docker"
		type make 2>&1 >/dev/null || error "Missing 'make': sudo $pkg make"
		type melange 2>&1 >/dev/null || error "Missing 'melange': sudo $pkg melange"
		type terraform 2>&1 >/dev/null || error "Missing 'terraform': sudo $pkg terraform"
		type yam 2>&1 >/dev/null || error "Missing 'yam': sudo $pkg yam"
	elif [ "$NAME" = "Ubuntu" ] || [ "$NAME" = "Debian GNU/Linux" ]; then
		local pkg="apt install"
		type go 2>&1 >/dev/null || sudo snap install go --classic
		type gh 2>&1 >/dev/null || sudo snap install gh
		type git 2>&1 >/dev/null || sudo apt install git
		type docker 2>&1 >/dev/null || (sudo apt install docker.io && sudo usermod -a -G docker $USER)
		type make 2>&1 >/dev/null || sudo apt install make
		type melange 2>&1 >/dev/null || go install chainguard.dev/melange@latest
		type terraform 2>&1 >/dev/null || go install github.com/hashicorp/terraform@latest
		type yam 2>&1 >/dev/null || go install github.com/chainguard-dev/yam@latest

	fi
	export TERRAFORM=$(command -v terraform)
}

_wolfi-check-deps

function wolfi-branch() {
	local url="git@github.com:$GH_USER/wolfi-os.git"
	[ -z "$1" ] && error "You must specify a branch name" && return
	local branch="$1"
	[ -z "$GH_USER" ] && error "You must set GH_USER to your github username" && return
	gh repo sync $GH_USER/wolfi-os -b main
	gh repo sync $GH_USER/wolfi-os -b "$branch"
	wolfi-sandbox
	git clone "$url" wolfi-os || error "Ensure that your fork is named 'wolfi-os'"
	cd wolfi-os
	git switch "$branch" || git branch "$branch" && git switch "$branch"
	git remote set-url origin git@github.com:$GH_USER/wolfi-rc.git
	git push origin -u "$1"
	git config pull.rebase true
}

function wolfi-grype() {
	docker pull cgr.dev/chainguard/grype:latest
	docker run --rm -ti cgr.dev/chainguard/grype "$@"
}

function _wolfi-latest() {
	# Internal function, ensure we have latest wolfi in our local docker image cache
	docker pull cgr.dev/chainguard/wolfi-base:latest
}

function wolfi-local() {
	_wolfi-latest
	if ! grep -qs "^local-wolfi:" Makefile 2>/dev/null; then
	       wolfi-source
	       cd wolfi-dev/os
	fi
	mkdir -p packages
	[ -f local-melange.rsa ] || melange keygen local-melange.rsa
	make local-wolfi
}

function wolfi-sandbox() {
	local d=$(mktemp -d /tmp/wolfi-$(date +%Y%m%d-%H%M%S)-XXXXXXXX)
	cd "$d"
	echo "$d"
}

function wolfi-sdk() {
	_wolfi-latest
	if ! grep -qs "^dev-container:" Makefile 2>/dev/null; then
	       wolfi-source
	       cd wolfi-dev/os
	fi
	make dev-container
}

function wolfi-shell() {
	_wolfi-latest
	docker run --rm -it $DOCKER_RUN_OPTS -v bash cgr.dev/chainguard/wolfi-base:latest "$@"
}

function wolfi-source() {
	local os_url="git@github.com:wolfi-dev/os.git"
	local images_url="git@github.com:chainguard-images/images.git"
	local dir="$(wolfi-sandbox)"
	mkdir -p "$dir/github.com/wolfi-dev/"
	cd "$dir/github.com/wolfi-dev/"
	git clone --depth=1 "$os_url" os
	mkdir -p "$dir/github.com/chainguard-images/"
	cd "$dir/github.com/chainguard-images/"
	git clone --depth=1 "$images_url" images
	cd "$dir"/github.com
	info "You now have a clean clone of wolfi-dev/os and chainguard-images/images"
}

function wolfi-image() {
	wolfi-source
	cd chainguard-images/images
	make init
	make image/$1
}

function wolfi-image-new() {
	wolfi-source
	cd chainguard-images/images
	make init
	# To generate scaffolding for new image:
	# 1=image name, 2=entry point
	go run ./monopod/monopod.go scaffold "$1" --entrypoint "$2"
	info "Generated images/$1"
}

function wolfi-yaml() {
	yam "$@"
}

function wolfi-convert-alpine() {
	local pkg="$1" i= url=
	[ -z "$pkg" ] && error "Specific Alpine package to convert" && return 1
	for i in main community; do
		if wget -q -O/dev/null https://git.alpinelinux.org/aports/plain/$i/$pkg/APKBUILD; then
			url=https://git.alpinelinux.org/aports/plain/$i/%s/APKBUILD
		fi
	done
	[ -z "$url" ] && error "Alpine package not found [$pkg]" && return 1
	if [ -e "$pkg".yaml ]; then
		if wget -q -O/dev/null https://github.com/wolfi-dev/os/blob/main/$pkg.yaml; then
			error "$pkg.yaml already exists at https://github.com/wolfi-dev/os/blob/main/$pkg.yaml" && return 1
		fi
	fi
	wolfi-branch "$1"
	local outdir="$(mktemp -d melange-XXXXXXXX)"
	melange convert apkbuild $pkg --out-dir="$outdir" --base-uri-format="$url"
	mv -f "$outdir"/*yaml "$pkg.yaml"
	yam "$pkg.yaml"
	rm -rf "$oudir"
	echo "==="
	cat "$pkg.yaml"
	echo "==="
	echo
	info "Wrote $pkg.yaml -- probably needs a little work"
	info "Hints:"
	info " - edit $pkg.yaml"
	info " - run 'wolfi-sdk' to get a build environment"
	info " - run 'make package/$pkg' inside the SDK build environment to get a new apk"
	info " - run 'wolfi-local' and then 'apk add $pkg' to try installing and running your package"
}

# First step in making images, is a make init in images directory
