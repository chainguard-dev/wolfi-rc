#!/bin/bash
# NOTE: Typically, this file needs to be sourced, rather than executed

# Copyright 2023 Chainguard, Inc.
# Author: Dustin Kirkland <kirkland@chainguard.dev>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

HELP="
## wolfi-rc commands

These are set of shell functions that facilitate package and image development
on Wolfi and Chainguard, within a command line environment.

Below, you can find some helpful hints on the available commands, and what
they do...

 - wolfi-branch [BRANCH_NAME]: Get your branch of the Wolfi OS source code
   - NOTE: You must set GH_USER to your github username
 - wolfi-convert-alpine [PACKAGE]: Attempt to port an existing Alpine package to Wolfi
 - wolfi-grype [TARGET]: Run grype on a given target
 - wolfi-local: Launch latest Wolfi in a docker container, with a local package repository
 - wolfi-pr: Print a URL where you can go to submit your PR from your branch to wolfi
 - wolfi-sdk: Launch latest Wolfi in a docker container for building packages
 - wolfi-sandbox: cd into a temporary directory in the form /tmp/wolfi-YYYYMMDD-HHMMSS-XXXXXXXX
 - wolfi-shell: Launch latest Wolfi in a docker container
 - wolfi-source: Get the current Wolfi OS and Images source code, in a new wolfi-sandbox directory
 - wolfi-work: start your workstation and ssh to it
 - wolfi-yam: Reformat yaml to Wolfi specifications
 - wolfi-lastchanged: The last time an APK inside a Chainguard image was updated
 - wolfi-lastbuilt: The last time a Chainguard image was built (signed) even if contents have not changed
 - wolfi-changesummary: Friendly summary of lastchanged and lastbuilt
 - wolfi-cdiff-fs: Diff two image filesystems
 - wolfi-cdiff-cfg: Diff two image configs
 - wolfi-cdiff-mf: Diff two image manifests
 - wolfi-imgsize: Get image size
 - wolfi-cls: List files in image
 - wolfi-ccat: Cat file in image
"

export MELANGE_EXTRA_OPTS="--runner docker"

type vim 2>/dev/null 1>&2 && alias vi=vim

# Note: you will need to export your Google Cloud user name (mine is first-last)
alias wolfi-work="gcloud workstations start \
	        --project=chainguard-workstations \
		--cluster=work \
		--config=work \
		--region=us-central1 \
		$GC_USER;
		gcloud workstations ssh \
		--project=chainguard-workstations \
		--cluster=work \
		--config=work \
		--region=us-central1 \
		$GC_USER"

function info() {
	printf "%s\n" "INFO: $@"
}

function error() {
	printf "%s\n" "ERROR: $@" 1>&2
}

function wolfi-help() {
	printf "%s\n" "$HELP"
}

function _wolfi-check-deps() {
	(echo "$PATH" | grep -qs "PATH.*go/bin") || export PATH="$PATH:$HOME/go/bin"
	UNAMEO=$(uname -o)
	FORCE=0
	case "$1" in
		-f|--force|-u|--upgrade)
			FORCE=1
		;;
	esac
	if [ "$UNAMEO" != "Darwin" ]; then
		. /etc/os-release
	fi
	if [ -z "$NAME" ] && [ "$UNAMEO" = "Darwin" ]; then
		type go 2>&1 >/dev/null || brew install go
		type git 2>&1 >/dev/null || brew install git
		type docker 2>&1 >/dev/null || brew install --cask docker
		type make 2>&1 >/dev/null || brew install make
		type melange 2>&1 >/dev/null || brew install melange
		type terraform 2>&1 >/dev/null || brew install terraform
		type yam 2>&1 >/dev/null || go install github.com/chainguard-dev/yam@latest
		type curl 2>&1 >/dev/null || brew install curl
		type chainctl 2>&1 >/dev/null || (brew tap chainguard-dev/tap && brew install chainctl)
	elif [ "$NAME" = "Wolfi" ]; then
		type sudo 2>&1 >/dev/null || apk add sudo-rs
		type go 2>&1 >/dev/null || sudo apk add go
		type git 2>&1 >/dev/null || sudo apk add git
		type docker 2>&1 >/dev/null || (sudo apk add docker && usermod -a -G docker $USER)
		type make 2>&1 >/dev/null || sudo apk add make
		type melange 2>&1 >/dev/null || sudo apk add melange
		type terraform 2>&1 >/dev/null || sudo apk add terraform
		type yam 2>&1 >/dev/null || sudo apk add yam
		type curl 2>&1 >/dev/null || sudo apk add curl
		type chainctl 2>&1 >/dev/null || sudo apk add chainctl
	elif [ "$NAME" = "Ubuntu" ] || [ "$NAME" = "Debian GNU/Linux" ]; then
		( ! type go 2>&1 >/dev/null || [ "$FORCE" = "1" ] ) && sudo snap install go --classic
		( ! type git 2>&1 >/dev/null || [ "$FORCE" = "1" ] ) && sudo apt install git
		( ! type docker 2>&1 >/dev/null || [ "$FORCE" = "1" ] ) && (sudo apt install docker.io && sudo usermod -a -G docker $USER)
		( ! type make 2>&1 >/dev/null || [ "$FORCE" = "1" ] ) && sudo apt install make
		( ! type melange 2>&1 >/dev/null || [ "$FORCE" = "1" ] ) && go install chainguard.dev/melange@latest
		( ! type apko 2>&1 >/dev/null || [ "$FORCE" = "1" ] ) && go install chainguard.dev/apko@latest
		( ! type terraform 2>&1 >/dev/null || [ "$FORCE" = "1" ] ) && sudo snap install terraform --classic
		( ! type yam 2>&1 >/dev/null || [ "$FORCE" = "1" ] ) && go install github.com/chainguard-dev/yam@latest
		( ! type wolfictl 2>&1 >/dev/null || [ "$FORCE" = "1" ] ) && (cd $HOME/src && git clone git@github.com:wolfi-dev/wolfictl.git wolfictl && cd wolfictl && go install)
		( ! type curl 2>&1 >/dev/null || [ "$FORCE" = "1" ] ) && sudo apt install curl
		( ! type k3d 2>&1 >/dev/null || [ "$FORCE" = "1" ] ) && curl -s https://raw.githubusercontent.com/k3d-io/k3d/main/install.sh | bash
		type chainctl 2>&1 >/dev/null || (mkdir -p ~/bin && curl -o ~/bin/chainctl "https://dl.enforce.dev/chainctl/latest/chainctl_$(uname -s | tr '[:upper:]' '[:lower:]')_$(uname -m | sed 's/aarch64/arm64/')" && chmod +x ~/bin/chainctl)
		[ "$FORCE" = "1" ] && chainctl update --yes
	else
		echo "$NAME"
		echo "Running on an unsupported OS"
		exit 1
	fi
	export TERRAFORM=$(command -v terraform)
	if [ "$UNAMEO" != "Darwin" ]; then
		if ! groups | grep -q docker; then
			sudo usermod -a -G docker $USER
			newgrp docker
		fi
	fi
	mkdir -p $HOME/tmp
}

_wolfi-check-deps

function wolfi-update-deps() {
	_wolfi-check-deps -u
}

function wolfi-branch() {
	[ -z "$GH_USER" ] && error "You must set GH_USER to your github username" && return
	local branch="$1"
	[ -z "$branch" ] && error "You must specify a branch name" && return
	[ -z "$2" ] && local url="git@github.com:$GH_USER/wolfi-os" || local url="$2"
	local project=$(echo "$url" | sed -e "s:.*/::")
	wolfi-sandbox "$project"-"$branch"
	git clone "$url" $project || error "Ensure that your fork is named 'wolfi-os' or 'enterprise-packages'"
	cd $project
	#git checkout main
	# Sync forks and update github
	#git remote add upstream git@github.com:chainguard-dev/$project
	#git pull upstream main
	if ! git switch "$branch"; then
		git branch "$branch"
		git switch "$branch"
	fi
	#git checkout main
	#git pull upstream main
	#git checkout "$branch"
	#git rebase main
	git push --set-upstream origin $branch
	#git push
}

function wolfi-branch-enterprise() {
	wolfi-branch $1 git@github.com:$GH_USER/enterprise-packages
}

function chainguard-branch-images() {
	wolfi-branch $1 git@github.com:$GH_USER/images-private
}

function wolfi-grype() {
	docker pull cgr.dev/chainguard/grype:latest
	docker run --rm -ti cgr.dev/chainguard/grype "$@"
}

function _wolfi-latest() {
	# Internal function, ensure we have latest wolfi in our local docker image cache
	docker pull cgr.dev/chainguard/wolfi-base:latest
}

function wolfi-local() {
	_wolfi-latest
	if ! grep -qs "^local-wolfi:" Makefile 2>/dev/null; then
	       wolfi-source
	       cd wolfi-os
	fi
	mkdir -p packages
	[ -f local-melange.rsa ] || melange keygen local-melange.rsa
	make local-wolfi
}

function wolfi-pr() {
	# TODO: Maybe use "git web--browse" or "sensible-browser" in the future?"
	#       For now, let's just print a URL where you can go to review and submit
	#       your PR.
	local diff=$(git diff -a | wc -l)
	[ "$?" != 0 ] && error "Something wrong with your local git repository" && return 1
	[ "$diff" -gt 0 ] && error "Uncommitted changes; see 'git diff -a'" && return 1
	local branch=$(git branch --show-current)
	local project=$(git config --get remote.origin.url | sed -e "s:.*/::" -e "s:\.git$::")
	echo
	echo "Open to submit pull request:"
	local owner="chainguard-dev"
	case "$project" in
		images-private)
			owner="chainguard-images"
		;;
	esac
	echo " - https://github.com/$owner/$project/compare/main...$GH_USER:$project:$branch?expand=1"
	echo
}

function wolfi-sandbox() {
	local d=$(mktemp -d /tmp/"$1"-$(date +%Y%m%d-%H%M%S)-XXX)
	cd "$d"
	echo "$d"
}

function wolfi-sdk() {
	_wolfi-latest
	if ! grep -qs "^dev-container:" Makefile 2>/dev/null; then
	       wolfi-source
	       cd wolfi-os
	fi
	mkdir -p $HOME/tmp
	mkdir -p packages
	[ -f local-melange.rsa ] || melange keygen local-melange.rsa
	make dev-container
}

function wolfi-shell() {
	_wolfi-latest
	docker run --rm -it $DOCKER_RUN_OPTS cgr.dev/chainguard/wolfi-base:latest "$@"
}

function _chainctl-auth() {
	chainctl config set default.use-refresh-token true
	chainctl config set auth.device-flow chainguard
	chainctl config set auth.mode headless
	chainctl config set default.social-login google-oauth2
	#chainctl auth status --quick >/dev/null || chainctl auth login --headless
	chainctl auth status --audience=cgr.dev --quick >/dev/null 2>&1 || chainctl auth configure-docker --headless
	chainctl auth status --audience apk.cgr.dev --quick || chainctl auth login --headless --audience apk.cgr.dev
}

function chainguard-shell() {
	_wolfi-latest
	_chainctl-auth
	docker run --rm -it $DOCKER_RUN_OPTS -e "HTTP_AUTH=basic:apk.cgr.dev:user:$(chainctl auth token --audience apk.cgr.dev)" cgr.dev/chainguard-private/chainguard-base:latest sh -c "apk add curl && curl -o /etc/apk/keys/latest.rsa.pub https://apk.cgr.dev/chainguard/latest.rsa.pub && /bin/echo 'https://apk.cgr.dev/chainguard-private' >> /etc/apk/repositories && /bin/sh -l"
}

function wolfi-source() {
	local os_url="git@github.com:chainguard-dev/wolfi-os.git"
	local enterprise_url="git@github.com:chainguard-dev/enterprise-packages.git"
	local images_url="git@github.com:chainguard-dev/images.git"
	local images_private_url="git@github.com:chainguard-images/images-private.git"
	local dir="$(wolfi-sandbox)"
	mkdir -p "$dir/github.com/"
	cd "$dir/github.com/"
	git clone "$os_url" wolfi-os
	git clone "$enterprise_url" enterprise-packages
	mkdir -p wolfi-os/packages
	cd "$dir/github.com/wolfi-os"
	[ -f local-melange.rsa ] || melange keygen local-melange.rsa
	cd "$dir/github.com/"
	git clone "$images_url" images
	git clone "$images_private_url" images-private
	info "You now have clean clones of wolfi-os, enterprise-packages, images, and images-private"
}

function wolfi-image() {
	wolfi-source
	cd chainguard-images/images
	make init
	make "image/$1"
}

function wolfi-image-new() {
	wolfi-source
	cd chainguard-images/images
	make init
	# To generate scaffolding for new image:
	# 1=image name, 2=entry point
	go run ./monopod/monopod.go scaffold "$1" --entrypoint "$2"
	info "Generated images/$1"
}

function wolfi-yaml() {
	yam "$@"
}

function wolfi-convert-alpine() {
	local pkg="$1" i='' url=''
	[ -z "$pkg" ] && error "Specific Alpine package to convert" && return 1
	wolfi-sandbox
	for i in main community; do
		if wget -q -O/dev/null "https://git.alpinelinux.org/aports/plain/$i/$pkg/APKBUILD"; then
			url=https://git.alpinelinux.org/aports/plain/$i/%s/APKBUILD
		fi
	done
	[ -z "$url" ] && error "Alpine package not found [$pkg]" && return 1
	if [ -e "$pkg".yaml ]; then
		if wget -q -O/dev/null "https://github.com/chainguard-dev/wolfi-os/blob/main/$pkg.yaml"; then
			error "$pkg.yaml already exists at https://github.com/chainguard-dev/wolfi-os/blob/main/$pkg.yaml" && return 1
		fi
	fi
	wolfi-branch "$1"
	local outdir="$(mktemp -d melange-XXXXXXXX)"
	melange convert apkbuild "$pkg" --out-dir="$outdir" --base-uri-format="$url"
	mv -f "$outdir"/*yaml "$pkg.yaml"
	yam "$pkg.yaml"
	rm -rf "$outdir"
	echo "==="
	cat "$pkg.yaml"
	echo "==="
	echo
	info "Wrote $pkg.yaml -- probably needs a little work"
	info "Hints:"
	info " - edit $pkg.yaml"
	info " - run 'wolfi-sdk' to get a build environment"
	info " - run 'make package/$pkg' inside the SDK build environment to get a new apk"
	info " - run 'wolfi-local' and then 'apk add $pkg' to try installing and running your package"
}

# First step in making images, is a make init in images directory


function wolfi-count-source() {
	grep "^package:" *.yaml | wc -l
}

function wolfi-count-binary() {
	grep name: *.yaml | sed -e "s/.*name: //" -e "s/\"//g" | grep -v "\s" | sort -u | wc -l
}

function wolfi-count-patches() {
	find . -type f -name "*.patch" | wc -l
}

function wolfi-count-yaml-lines() {
	wc -l *.yaml | grep "total$" | awk '{print $1}'
}

function wolfi-count-commits() {
	git log --pretty=format:'' | wc -l
}

function wolfi-count-tests() {
	grep "^test:" *.yaml | wc -l
}

function wolfi-count-images() {
	grep -ri "source:.*cgr.dev" | sed -e "s:.*/::" -e "s/:.*//" | sort -u | wc -l
}

function wolfi-numbers() {
	local years=$(seq 2023 2024)
	local months=$(seq -w 1 12)
	local today=$(date +%Y%m%d)
	local year= month= timestamp= src= bin= patches= lines= commits= tests= images=
	wolfi-source
	echo "DATE	SRC_PKGS	BIN_PKGS	PATCHES	YAML_LINES COMMITS	TESTS	IMAGES"
	for year in $years; do
		for month in $months; do
			timestamp="$year-$month-01"
			[ $(echo "$timestamp" | sed -e "s/-//g") -gt "$today" ] && break
			cd wolfi-os
			git checkout `git rev-list -n 1 --before="$timestamp" main` >/dev/null 2>&1
			src=$(wolfi-count-source)
			bin=$(wolfi-count-binary)
			patches=$(wolfi-count-patches)
			lines=$(wolfi-count-yaml-lines)
			commits=$(wolfi-count-commits)
			tests=$(wolfi-count-tests)
			cd ../images
			git checkout `git rev-list -n 1 --before="$timestamp" main` >/dev/null 2>&1
			cd ../images-private
			git checkout `git rev-list -n 1 --before="$timestamp" main` >/dev/null 2>&1
			images=$(wolfi-count-images)
			cd ..

			echo "$timestamp	$src	$bin	$patches	$lines	$commits	$tests	$images"
		done
	done
}

# Function to check if an epoch value in a YAML file has been incremented by 1
function check_epoch_increment() {
    local file=$1

    # Get the current epoch value from the staging area (index)
    current_epoch=$(grep -E 'epoch:' "$file" | awk '{print $2}')
    
    # Get the previous epoch value from the last committed version of the file
    previous_epoch=$(git show HEAD:"$file" | grep -E 'epoch:' | awk '{print $2}')

    # Check if both current and previous epoch values are integers
    if [[ $current_epoch =~ ^[0-9]+$ ]] && [[ $previous_epoch =~ ^[0-9]+$ ]]; then
        # Check if the current epoch is exactly 1 more than the previous epoch
        if [[ $((previous_epoch + 1)) -ne $current_epoch ]]; then
            echo "Error: The epoch value in $file has not been incremented by 1."
            return 1
        fi
    else
        echo "Error: Invalid epoch values in $file."
        return 1
    fi
    return 0
}

function wolfi-epoch() {
	# Get the list of modified YAML files in the staging area
	modified_files=$(git diff --cached --name-only --diff-filter=AM | grep '\.yaml$')

	# Check each modified YAML file
	for file in $modified_files; do
		if ! check_epoch_increment "$file"; then
			echo "Pre-commit hook failed. Please increment the epoch value by 1 in $file."
			exit 1
		fi
	done
}

# The last time an APK inside a Chainguard image was updated
function wolfi-lastchanged() {
	crane config $1 | jq -r '.created'
}

# The last time a Chainguard image was built (signed) even if contents have not changed
function wolfi-lastbuilt() {
	cosign verify $1 --certificate-identity-regexp=.* --certificate-oidc-issuer-regexp=.* 2>/dev/null | \
		jq -r '.[0].optional.Bundle.Payload.integratedTime' | \
		TZ=UTC xargs python3 -c 'import datetime,sys;print(datetime.datetime.fromtimestamp(int(sys.argv[1])).strftime("%Y-%m-%dT%H:%M:%SZ"))'
}

# Friendly summary of lastchanged and lastbuilt
function wolfi-changesummary() {
	echo "last changed: $(wolfi-lastchanged $1)"
	echo "last built:   $(wolfi-lastbuilt $1)"
}

# Note: the following functions (wolfi-cdiff-fs through wolfi-ccat) were
# originally found in @imjasonh's "image inspection helpers" gist here:
# https://gist.github.com/imjasonh/ce437a40160acab17030d024d4680fd2

# Diff two image filesystems
function wolfi-cdiff-fs() {
	diff \
		<(crane export $1 - --platform ${3:-linux/amd64} | tar -tvf - | sort) \
		<(crane export $2 - --platform ${3:-linux/amd64} | tar -tvf - | sort)
}

# Diff two image configs
function wolfi-cdiff-cfg() {
	diff \
		<(crane config $1 --platform ${3:-linux/amd64} | jq) \
		<(crane config $2 --platform ${3:-linux/amd64} | jq)
}

# Diff two image manifests
function wolfi-cdiff-mf() {
	diff \
		<(crane manifest $1 --platform ${3:-linux/amd64} | jq) \
		<(crane manifest $2 --platform ${3:-linux/amd64} | jq)
}

# Get image size
function wolfi-imgsize() {
	crane manifest $1 --platform ${2:-linux/amd64} | jq '.config.size + ([.layers[].size] | add)' | numfmt --to=iec
}

# List files in image
function wolfi-cls() {
	crane export $1 --platform ${2:-linux/amd64} | tar -tvf -
}

# Cat file in image
function wolfi-ccat() {
	crane export $1 --platform ${3:-linux/amd64} - | tar -Oxf - $2
}
